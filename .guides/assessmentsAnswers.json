[
 {
  "taskId": "multiple-choice-1940684776",
  "points": 0,
  "state": {
   "active": "d63202cf-da3c-ff1b-c466-4ca9b8e25c14"
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-3821345628",
  "points": 1,
  "state": {
   "active": [
    "b4e84ff2-f5a1-9c9a-7160-5e3bdcc804d7",
    "5b7ed779-a3a1-1ea9-245a-7eeb0e5c1bf0"
   ]
  },
  "results": [
   {
    "guidance": "The correct way to declare a non-empty list in Python is as follows:\n```python\nthe_list = [2, 4, 'more elements']\n```\nA literal list declaration consists of elements separated by commas (`,`) and is surrounded by square brackets (`[]`). The second and third options declare a _tuple_, which is different from a list. The fourth option declares a _set_, which is also different from a list.",
    "current": [
     "b4e84ff2-f5a1-9c9a-7160-5e3bdcc804d7",
     "5b7ed779-a3a1-1ea9-245a-7eeb0e5c1bf0"
    ],
    "right": [
     "b4e84ff2-f5a1-9c9a-7160-5e3bdcc804d7",
     "5b7ed779-a3a1-1ea9-245a-7eeb0e5c1bf0"
    ],
    "timestamp": 1586024402818,
    "state": "pass"
   }
  ]
 },
 {
  "taskId": "fill-in-the-blanks-3547173064",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-4088401606",
  "points": 0,
  "state": {
   "active": [
    "color",
    "colors",
    "color"
   ]
  },
  "results": []
 },
 {
  "taskId": "multiple-choice-1388084939",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "code-output-compare-1033494422",
  "points": 1,
  "results": [
   {
    "guidance": null,
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": true, \"stdout\": \"Hello World!\"}]}",
    "timestamp": 1586373715418,
    "state": "pass"
   },
   {
    "guidance": null,
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"Hello World!\\n\"}]}",
    "timestamp": 1586373709892,
    "state": "fail"
   },
   {
    "guidance": null,
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1586373549638,
    "state": "fail"
   },
   {
    "guidance": null,
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1586373527567,
    "state": "fail"
   },
   {
    "guidance": null,
    "output": "{\"sequence\": [{\"returnCode\": 0, \"stderr\": \"\", \"passed\": false, \"stdout\": \"Hi\\n\"}]}",
    "timestamp": 1586373409672,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "multiple-choice-969795572",
  "points": 0,
  "state": {
   "active": null
  },
  "results": []
 },
 {
  "taskId": "code-output-compare-1838402046",
  "points": 0,
  "results": [
   {
    "guidance": "The simplest way to solve this problem is to make a series of 12 if-statements.\n\n```python\nif month == 1:\n  print(\"January\")\nif month == 2:\n  print(\"February\")\nif month == 3:\n  print(\"March\")\nif month == 4:\n  print(\"April\")\nif month == 5:\n  print(\"May\")\nif month == 6:\n  print(\"June\")\nif month == 7:\n  print(\"July\")\nif month == 8:\n  print(\"August\")\nif month == 9:\n  print(\"September\")\nif month == 10:\n  print(\"October\")\nif month == 11:\n  print(\"November\")\nif month == 12:\n  print(\"December\")\n```",
    "output": "{\"sequence\": [{\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    month = \\n           ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1586466658907,
    "state": "fail"
   },
   {
    "guidance": "The simplest way to solve this problem is to make a series of 12 if-statements.\n\n```python\nif month == 1:\n  print(\"January\")\nif month == 2:\n  print(\"February\")\nif month == 3:\n  print(\"March\")\nif month == 4:\n  print(\"April\")\nif month == 5:\n  print(\"May\")\nif month == 6:\n  print(\"June\")\nif month == 7:\n  print(\"July\")\nif month == 8:\n  print(\"August\")\nif month == 9:\n  print(\"September\")\nif month == 10:\n  print(\"October\")\nif month == 11:\n  print(\"November\")\nif month == 12:\n  print(\"December\")\n```",
    "output": "{\"sequence\": [{\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}, {\"returnCode\": 1, \"stderr\": \"Traceback (most recent call last):\\n  File \\\".guides/secure/conditionals_lab_test.py\\\", line 5, in <module>\\n    exec(student_work)\\n  File \\\"<string>\\\", line 1\\n    if \\n      ^\\nSyntaxError: invalid syntax\\n\", \"passed\": false, \"stdout\": \"\"}]}",
    "timestamp": 1586466541708,
    "state": "fail"
   }
  ]
 },
 {
  "taskId": "fill-in-the-blanks-1796257491",
  "points": 0,
  "state": {
   "active": []
  },
  "results": []
 },
 {
  "taskId": "parsons-puzzle-2081035412",
  "points": 0,
  "state": {
   "trashHash": "5_0-3_0-4_0",
   "solutionHash": "0_0-1_1-2_0",
   "toggleStates": "{}"
  },
  "results": [
   {
    "points": 1,
    "guidance": "A function needs to be defined before it can be called. In Python, function definitions are started with the keyword `def`. Function definitions should start with the function header, then the docstring, and finally the function body. Be sure to indent the docstring and the function body. To call a function, write the function's name (as stated in the function header) followed by parentheses. The function call should not be indented.\n\n```python\ndef caesar_quote():\n    print(\"Veni, vidi, vici\")\ncaesar_quote()\n```",
    "trashHash": "5_0-3_0-4_0",
    "solutionHash": "0_0-1_12-2_0",
    "toggleStates": "{}",
    "studentCode": "def caesar_quote():\n  print(\"Veni, vidi, vici\")\ncaesar_quote()",
    "timestamp": 1586615739603,
    "state": "pass"
   },
   {
    "points": 1,
    "guidance": "A function needs to be defined before it can be called. In Python, function definitions are started with the keyword `def`. Function definitions should start with the function header, then the docstring, and finally the function body. Be sure to indent the docstring and the function body. To call a function, write the function's name (as stated in the function header) followed by parentheses. The function call should not be indented.\n\n```python\ndef caesar_quote():\n    print(\"Veni, vidi, vici\")\ncaesar_quote()\n```",
    "trashHash": "5_0-3_0-4_0",
    "solutionHash": "0_0-1_1-2_0",
    "toggleStates": "{}",
    "studentCode": "def caesar_quote():\n  print(\"Veni, vidi, vici\")\ncaesar_quote()",
    "timestamp": 1586615731391,
    "state": "pass"
   }
  ]
 },
 {
  "taskId": "multiple-choice-1896286432",
  "points": 0,
  "state": {
   "active": "fcfe8e17-c402-f9a7-395e-fdd5aacbc747"
  },
  "results": []
 },
 {
  "taskId": "fill-in-the-blanks-1983298612",
  "points": 1,
  "state": {
   "active": [
    "def",
    ":",
    "#",
    "my_function"
   ]
  },
  "results": [
   {
    "guidance": "Function headers start with the `def` keyword and end with a `:`. The docstring starts and ends with `\"\"\"`. Finally, you call a function by writing its name followed by parentheses.\n\n```python\ndef my_function():\n    \"\"\"Print the string 'This is a function'.\"\"\"\n    print(\"This is a function\")\n\nmy_function()\n```",
    "current": [
     "def",
     ":",
     "#",
     "my_function"
    ],
    "right": [
     "def",
     ":",
     "#",
     "my_function"
    ],
    "timestamp": 1586615775112,
    "state": "pass"
   }
  ]
 }
]