[
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-348386203",
  "source": {
   "name": "How many seconds?",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "42 minutes multiplied by 60 seconds per minute is 2520 seconds.  Adding 42 seconds provides a total of 2,562 seconds.",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/seconds.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Create a print statement that will output the number of seconds in 42 minutes and 42 seconds.",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "2562"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2635110836",
  "source": {
   "name": "How many miles?",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "To convert 10 KM to miles, you would divide the number of kilometers by 1.61 to come up with 6.211180124223602",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/miles.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Create a print statement to answer this question.  How many miles are there in 10 kilometers? \n\nHint: there are 1.61 kilometers in a mile.",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "6.211180124223602"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-531739677",
  "source": {
   "name": "Pace",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "Pace in minutes per mile: 7.003500000000001\nAverage speed in mph: 8.567144998929106",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Start the Python interpreter and use it as a calculator.\n\nIf you run a 10 kilometer race in 42 minutes 42 seconds, what is your average pace (time per mile in minutes and seconds)? \n\nWhat is your average speed in miles per hour?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": true,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "97c72b3c-c005-b3f8-9ee7-0db53e8a9d0f",
     "correct": true,
     "answer": "7.003500000000001 minutes per mile"
    },
    {
     "_id": "e2513cee-72cd-bd0e-b8dc-3d3eb24b2b20",
     "correct": false,
     "answer": "8.567144998929106 minutes per mile"
    },
    {
     "_id": "68b73df6-92e5-fe87-6d76-f91ea3e97685",
     "correct": true,
     "answer": "8.567144998929106 miles per hour"
    },
    {
     "_id": "06cc1ae0-4abf-3d83-814a-312087afb3c1",
     "correct": false,
     "answer": "7.003500000000001 miles per hour"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3528825702",
  "source": {
   "name": "print statement syntax",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "<<<syntax error>>>",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Fill in the blank",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "In a print statement, what happens if you leave out one of the parentheses, or both? <<<Syntax Error>>>",
   "tokens": {
    "blank": [
     "Syntax Error"
    ],
    "text": [
     "In a print statement, what happens if you leave out one of the parentheses, or both? ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1373369433",
  "source": {
   "name": "Printing Strings",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "<<< EOL while scanning string literal >>>",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Fill in the Blank",
   "points": "1",
   "showValues": true,
   "learningObjectives": "",
   "text": "If you are trying to print a string, what happens if you leave out one of the quotation marks, or both? <<<String is converted to an integer>>> <<<EOL while scanning string literal>>>",
   "tokens": {
    "blank": [
     "String is converted to an integer",
     "EOL while scanning string literal"
    ],
    "text": [
     "If you are trying to print a string, what happens if you leave out one of the quotation marks, or both? ",
     0,
     " ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2478628783",
  "source": {
   "name": "Print strings",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "EOL while scanning string literal",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "If you are trying to print a string, what happens if you leave out one of the quotation marks, or both?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "f0f837a7-2e9c-b69d-709d-520f4733e8b0",
     "correct": true,
     "answer": "EOL while scanning string literal"
    },
    {
     "_id": "d9b98fc3-47a4-9ea5-7e09-17020070ca0c",
     "correct": false,
     "answer": "String is converted to an integer"
    },
    {
     "_id": "cc5e5e56-84a3-55e4-c237-574dc35e3924",
     "correct": false,
     "answer": "Python automatically adds the closing quotation mark when the code is run"
    },
    {
     "_id": "4d1822a2-0285-a0f4-3d90-8444501e5b42",
     "correct": false,
     "answer": "A warning is generated during compilation"
    }
   ]
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2898918383",
  "source": {
   "name": "Signed numbers",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "You can use a minus sign to make a negative number like <span>-2</span>. What happens if you put a plus sign before a number? What about <span>2++2</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3158916856",
  "source": {
   "name": "Leading zeros",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": true,
   "oneTimeTest": true,
   "instructions": "In math notation, leading zeros are ok, as in <span>02</span>. What happens if you try this in Python?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-705754624",
  "source": {
   "name": "No operator",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What happens if you have two values with no operator between them?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3182075523",
  "source": {
   "name": "Assignment statements",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Weâ€™ve seen that <span>n = 42</span> is legal. What about <span>42 = n</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1000159001",
  "source": {
   "name": "Multiple assignment",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "How about <span>x = y = 1</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-701808485",
  "source": {
   "name": "Line endings",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "In some languages every statement ends with a semi-colon, <span>;</span>. What happens if you put a semi-colon at the end of a Python statement?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2242469399",
  "source": {
   "name": "Statement endings",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What if you put a period at the end of a statement?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2370220429",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "In math notation you can multiply x and y like this: xy. What happens if you try that in Python?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1799092468",
  "source": {
   "name": "Calculate volume",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercises_2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "The volume of a sphere with radius $r$ is $\\frac{4}{3} \\pi r^3$. What is the volume of a sphere with radius 5?",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "523.5987755982989"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-147802722",
  "source": {
   "name": "Shipping costs",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercises_2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Suppose the cover price of a book is 24.95, but bookstores get a 40 percent discount. Shipping costs 3 dollars for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "945.45"
    }
   ]
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1517147772",
  "source": {
   "name": "How long?",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "7:30:06",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": true,
   "oneTimeTest": true,
   "instructions": "If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3367323985",
  "source": {
   "name": "Time components",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "Answers will vary based on current time when student runs the exercise",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Write a script that reads the current time and converts it to a time of day in hours, minutes, and seconds, plus the number of days since the epoch.",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3828640500",
  "source": {
   "name": "Calling recursively",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What would happen if you called this function like this: <span>recurse(-1, 0)</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1474599446",
  "source": {
   "name": "docstring",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Write a docstring that explains everything someone would need to know in order to use this function (and nothing else).",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1222847010",
  "source": {
   "name": "Stack",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What does the program print?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3413124657",
  "source": {
   "name": "Function 1",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase1(s):\n             for c in s:\n                 if c.islower():\n                     return True\n                 else:\n                     return False",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-180072190",
  "source": {
   "name": "function 2",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase2(s):\n            for c in s:\n                if 'c'.islower():\n                    return 'True'\n                else:\n                    return 'False' ",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-920992499",
  "source": {
   "name": "Function 3",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase3(s):\n        for c in s:\n            flag = c.islower()\n        return flag",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2821882119",
  "source": {
   "name": "Function 4",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase4(s):\n        flag = False\n        for c in s:\n            flag = flag or c.islower()\n        return flag",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2364923939",
  "source": {
   "name": "Function 5",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase5(s):\n        for c in s:\n            if not c.islower():\n                return False\n        return True",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2592942619",
  "source": {
   "name": "Counting Words in a List",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Write a function that reads the file <span>words.txt</span> and builds a list with one element per word. Write two versions of this function, one using the <span>append</span> method and the other using the idiom <span>t = t + [x]</span>. Which one takes longer to run? Why?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3217928902",
  "source": {
   "name": "Calculate Volume of Sphere",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The volume of a sphere with a radius $r$ is $\\frac{4}{3} \\pi r^3$. What is the volume (rounded to the nearest hundredth) of a sphere with radius 5?  <<<523.60>>>",
   "tokens": {
    "blank": [
     "523.60"
    ],
    "text": [
     "The volume of a sphere with a radius $r$ is $\\frac{4}{3} \\pi r^3$. What is the volume (rounded to the nearest hundredth) of a sphere with radius 5?  ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4145336160",
  "source": {
   "name": "Total Cost",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "$945.45",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "Suppose the cover price of a book is 24.95, but bookstores get a 40 percent discount. Shipping costs 3 dollars for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?  $<<<945.45>>>",
   "tokens": {
    "blank": [
     "945.45"
    ],
    "text": [
     "Suppose the cover price of a book is 24.95, but bookstores get a 40 percent discount. Shipping costs 3 dollars for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?  $",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3179500375",
  "source": {
   "name": "How many seconds?",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "42 minutes multiplied by 60 seconds per minute is 2520 seconds.  Adding 42 seconds provides a total of 2,562 seconds.",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "How many seconds are there in 42 minutes 42 seconds?",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "<<<2562>>> seconds",
   "tokens": {
    "blank": [
     "2562"
    ],
    "text": [
     0,
     " seconds"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3528387349",
  "source": {
   "name": "How many miles?",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "To convert 10 KM to miles, you would divide the number of kilometers by 1.61 to come up with 6.211180124223602",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "instructions": "",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "How many miles are there in 10 kilometers? \n\nHint: there are 1.61 kilometers in a mile.\n\n<<<6.211180124223602>>> miles",
   "tokens": {
    "blank": [
     "6.211180124223602"
    ],
    "text": [
     "How many miles are there in 10 kilometers? \n\nHint: there are 1.61 kilometers in a mile.\n\n",
     0,
     " miles"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1457711782",
  "source": {
   "name": "Leading Zeros",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "In math notation, leading zeros are ok, as in <span>02</span>. What happens if you try this in Python?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "c434b93f-37e8-f5d0-46bf-16b1d3d50027",
     "correct": false,
     "answer": "It works the same as math notation"
    },
    {
     "_id": "1b39a293-c097-73d3-d48a-1f50411166a8",
     "correct": true,
     "answer": "SyntaxError: invalid token"
    },
    {
     "_id": "2f13c001-8d0e-27d1-cb20-82ef26560879",
     "correct": false,
     "answer": "SyntaxError: invalid syntax"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4178934980",
  "source": {
   "name": "No operator",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "What happens if you have two values with no operator between them?\n",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal prints <<<SyntaxError: invalid syntax>>>",
   "tokens": {
    "blank": [
     "SyntaxError: invalid syntax"
    ],
    "text": [
     "The terminal prints ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1060167938",
  "source": {
   "name": "How long?",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?\n",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "<<<07>>>:<<<30>>>:<<<06>>> am\n\n(include leading zeros)",
   "tokens": {
    "blank": [
     "07",
     "30",
     "06"
    ],
    "text": [
     0,
     ":",
     0,
     ":",
     0,
     " am\n\n(include leading zeros)"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-182777174",
  "source": {
   "name": "Assignment Syntax",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Weâ€™ve seen that <span>n = 42</span> is legal. What about <span>42 = n</span>?",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal outputs <<<SyntaxError: can't assign to literal>>>",
   "tokens": {
    "blank": [
     "SyntaxError: can't assign to literal"
    ],
    "text": [
     "The terminal outputs ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3014115606",
  "source": {
   "name": "Multiple Assignments",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "How about <span>x = y = 1</span>?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "cf52b294-166f-348f-d841-35fca345f265",
     "correct": false,
     "answer": "SyntaxError: can't assign to literal"
    },
    {
     "_id": "9f94ffea-d382-4679-675f-a7ea86ea3339",
     "correct": false,
     "answer": "SyntaxError: invalid syntax"
    },
    {
     "_id": "e1d6f12f-d8d1-1a3b-8c8d-82d1f444c972",
     "correct": true,
     "answer": "The program assigns 1 to both x and y"
    },
    {
     "_id": "26df8b05-d433-a494-e4d9-cfce2aa97809",
     "correct": false,
     "answer": "NameError"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1574873620",
  "source": {
   "name": "Line Endings",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "In some languages every statement ends with a semi-colon, ;. What happens if you put a semi-colon at the end of a Python statement?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "49587692-30c2-5cb4-d415-27c3d726c978",
     "correct": false,
     "answer": "SyntaxError: invalid syntax"
    },
    {
     "_id": "41f8d443-3b4c-e4ce-8ab5-1cc10d1f00ea",
     "correct": false,
     "answer": "SyntaxError: invalid token"
    },
    {
     "_id": "d520dcce-8fd2-121a-3814-6727d486038b",
     "correct": false,
     "answer": "NameError"
    },
    {
     "_id": "913d8867-b4a7-a02f-5b21-4e290788f3e1",
     "correct": true,
     "answer": "The program works as expected"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1056791596",
  "source": {
   "name": "Statement Endings",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "What if you put a period at the end of a statement?\n",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal outputs <<<SyntaxError: invalid syntax>>>",
   "tokens": {
    "blank": [
     "SyntaxError: invalid syntax"
    ],
    "text": [
     "The terminal outputs ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2614494355",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "In math notation you can multiply x and y like this: xy. What happens if you try that in Python?",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal outputs <<<NameError: name 'xy' is not defined>>>",
   "tokens": {
    "blank": [
     "NameError: name 'xy' is not defined"
    ],
    "text": [
     "The terminal outputs ",
     0
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3425152502",
  "source": {
   "name": "exercise_3.1",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/function_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your program so the computer can test it. \n\n        right_justify(input())\n\nThen check your code by clicking the button below",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "monty",
     "output": "                                                                 monty"
    },
    {
     "arguments": "",
     "input": "monkies",
     "output": "                                                               monkies"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3951927146",
  "source": {
   "name": "exercise_3.2",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/do_four.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_3-2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function call you have at the end of your script with the following:\n\n    do_four(print_twice, input())\n\nThen, submit your code by clicking the button below",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "spam",
     "output": "spam\nspam\nspam\nspam\nspam\nspam\nspam\nspam"
    },
    {
     "arguments": "",
     "input": "cat",
     "output": "cat\ncat\ncat\ncat\ncat\ncat\ncat\ncat"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-591127166",
  "source": {
   "name": "exercise_3.3",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/grid.py>. Credit: This exercise is based on an exercise in Oualline, <span>*Practical C Programming, Third Edition*</span>, Oâ€™Reilly Media, 1997.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_3-3.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Submit your code by clicking the button below.",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "+ - - - - + - - - - +\n|         |         |\n|         |         |\n|         |         |\n|         |         |\n+ - - - - + - - - - +\n|         |         |\n|         |         |\n|         |         |\n|         |         |\n+ - - - - + - - - - +"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-145839972",
  "source": {
   "name": "exercise5.2",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_5-2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Remove any user prompts from your code (so the user types each number followed by enter with nothing printing).\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "3\n4\n5\n2",
     "output": "No, that doesnâ€™t work."
    },
    {
     "arguments": "",
     "input": "1\n2\n3\n1",
     "output": "Holy smokes, Fermat was wrong!"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3866282499",
  "source": {
   "name": "exercise 5.3",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_5-3.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Remove any user prompts from your code (so the user types each number followed by enter with nothing printing).\n\nThen, submit your code by clicking the button below:\n\n",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "1\n1\n12\n",
     "output": "No"
    },
    {
     "arguments": "",
     "input": "3\n4\n5",
     "output": "Yes"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1992895610",
  "source": {
   "name": "exercise 6.2",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/ackermann.py>. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercises_4.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    ack(input(),input())\n\nThen, submit your code using the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "3\n3\n",
     "output": "61"
    },
    {
     "arguments": "",
     "input": "3\n4\n",
     "output": "125"
    },
    {
     "arguments": "",
     "input": "0\n0\n",
     "output": "1"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-758402567",
  "source": {
   "name": "exercise 6.3",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/palindrome_soln.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/palindrome.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    print(is_palindrome(input()))\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "racecar",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "banana",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2496986975",
  "source": {
   "name": "exercise 6.4",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_6-4.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    print(is_power(input()))\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "8\n2",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "10\n2",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1894224389",
  "source": {
   "name": "exercise 6.5",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/gcd.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    gcd( input(), input() )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "8\n4\n",
     "output": "4"
    },
    {
     "arguments": "",
     "input": "12\n8\n",
     "output": "4\n"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-18622402",
  "source": {
   "name": "exercise 7.2",
   "showName": false,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/eval_loop.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "1 + 2 * 3\ndone\n",
     "output": "7"
    },
    {
     "arguments": "",
     "input": "2**3\ndone",
     "output": "8"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1310791755",
  "source": {
   "name": "exercise 8.3",
   "showName": false,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/new_palindrome.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line to your code at the end and make sure your one-line palindrome check is inside a function called `is_palindrome()` which takes a string as a parameter and returns whether it is (True) or not (False).\n\n    print( is_palindrome( input() ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "racecar",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "banana",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-420630043",
  "source": {
   "name": "exercise 8.5",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/rotate.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/caesar.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line to the end of your code:\n\n    print( rotate_word( input(), int(input()) ) )\n\nThen, submit your code by pressing the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "cheer\n7",
     "output": "jolly"
    },
    {
     "arguments": "",
     "input": "melon\n-10",
     "output": "cubed"
    },
    {
     "arguments": "",
     "input": "IBM\n-1",
     "output": "HAL"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-887892343",
  "source": {
   "name": "exercise 9.7",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/cartalk1.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/cartalk.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Once your program prints out all the three consecutive double letter words in words.txt, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "bookkeeper\nbookkeepers\nbookkeeping\nbookkeepings"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1362944689",
  "source": {
   "name": "exercise 9.8",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/cartalk2.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/cartalk2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Once your program prints out all the odometer readings, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "198888\n199999"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1157571896",
  "source": {
   "name": "exercise 9.9",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/cartalk3.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "instructions": "When you think you know the answer, fill in the ages below.",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "Right now, the question asker is <<<57>>> years old and their mother is <<<75>>> years old.",
   "tokens": {
    "blank": [
     "57",
     "75"
    ],
    "text": [
     "Right now, the question asker is ",
     0,
     " years old and their mother is ",
     0,
     " years old."
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-494022662",
  "source": {
   "name": "exercise 10.1",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    nested_sum( eval(input()) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[ [1],[2],[3]]",
     "output": "6"
    },
    {
     "arguments": "",
     "input": "[[1,2],[3,4],[5]]",
     "output": "15"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1457472805",
  "source": {
   "name": "exercise 10.2",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    cumsum( eval(input()) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[2, 4, 6]",
     "output": "[2, 6, 12]"
    },
    {
     "arguments": "",
     "input": "[1, 3, 5]",
     "output": "[1, 4, 9]"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3748038241",
  "source": {
   "name": "exercise 10.3",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    middle( eval(input()) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1,2,3,4]",
     "output": "[2, 3]"
    },
    {
     "arguments": "",
     "input": "[5, 6, 7]",
     "output": "[6]"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1149399147",
  "source": {
   "name": "exercise 10.4 ",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    temp = eval(input())\n    chop( temp )\n    print(temp)\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3, 4]",
     "output": "[2, 3]"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3000215543",
  "source": {
   "name": "exercise 10.5",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists/exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( is_sorted( eval(input()) ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3]",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "[5, 4, 3, 2, 1]",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3887924794",
  "source": {
   "name": "exercise 10.6",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( is_anagram(input(), input() ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "astronomer\nmoon starer\n",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "the eyes\nthey see\n",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "dog\ncat\n",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3268379659",
  "source": {
   "name": "exercise 10.7",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "You can download solutions to these exercises from <http://thinkpython2.com/code/list_exercises.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( has_duplicates( eval( input() ) ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3]",
     "output": "False"
    },
    {
     "arguments": "",
     "input": "[1, 2, 2, 3]",
     "output": "True"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1428225196",
  "source": {
   "name": "exercise 10.10",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/inlist.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/bisection.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following to the end of your program:\n    \n    word_list = []\n    fin = open('words.txt')\n    for line in fin:\n        word = line.strip()\n        word_list.append(word)\n    print(in_bisect(word_list, input()))\n\nThen click the button below to submit your program:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "alien\n",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "allen\n",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-150852830",
  "source": {
   "name": "exercise 10.11",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/reverse_pair.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/reverse_pair_try.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "aa aa\naba aba\nabut tuba\nad da\nados soda\naga aga\nagar raga\nagas saga\nagenes senega\nah ha\naha aha\naider redia\nairts stria\najar raja\nala ala\nalif fila\nalula alula\nam ma\nama ama\namen nema\namis sima\nan na\nana ana\nanger regna\nanimal lamina\nanimes semina\nanna anna\nanon nona\nante etna\nare era\nares sera\naril lira\narris sirra\narum mura\nat ta\nate eta\nates seta\nauks skua\nava ava\navid diva\navo ova\nawa awa\nay ya\nbad dab\nbag gab\nbal lab\nbals slab\nban nab\nbard drab\nbas sab\nbat tab\nbats stab\nbed deb\nben neb\nbib bib\nbid dib\nbig gib\nbin nib\nbins snib\nbird drib\nbis sib\nbob bob\nbog gob\nboob boob\nbos sob\nbots stob\nbows swob\nbrad darb\nbrag garb\nbub bub\nbud dub\nbun nub\nbuns snub\nbur rub\nburd drub\nburg grub\nbus sub\nbut tub\nbuts stub\ncam mac\ncap pac\ncares serac\ncivic civic\ncod doc\ncram marc\ncud duc\nda ad\ndab bad\ndad dad\ndag gad\ndah had\ndahs shad\ndam mad\ndap pad\ndarb brad\ndart trad\ndaw wad\ndeb bed\ndebut tubed\ndecal laced\ndedal laded\ndeed deed\ndeem meed\ndeep peed\ndeeps speed\ndeer reed\ndees seed\ndefer refed\ndegami imaged\ndeified deified\ndeifier reified\ndeil lied\ndeke eked\ndeked deked\ndel led\ndeled deled\ndelf fled\ndeliver reviled\ndels sled\ndemit timed\ndenier reined\ndenies seined\ndenim mined\ndenned denned\ndens sned\ndepot toped\ndepots stoped\nderat tared\nderats stared\ndessert tressed\ndesserts stressed\ndevas saved\ndevil lived\ndew wed\ndewans snawed\ndewed dewed\ndexes sexed\ndial laid\ndialer relaid\ndiaper repaid\ndib bid\ndid did\ndig gid\ndim mid\ndinar ranid\ndiols sloid\ndirts strid\ndiva avid\ndo od\ndoc cod\ndog god\ndom mod\ndon nod\ndoom mood\ndoor rood\ndor rod\ndormin nimrod\ndorp prod\ndos sod\ndot tod\ndrab bard\ndrail liard\ndraw ward\ndrawer reward\ndraws sward\ndray yard\ndrib bird\ndrub burd\ndual laud\ndub bud\nduc cud\nducs scud\ndud dud\nduel leud\nduo oud\ndup pud\ndups spud\neat tae\nedile elide\nedit tide\neel lee\neh he\neke eke\neked deke\nelide edile\nelides sedile\nem me\neme eme\nemes seme\nemir rime\nemit time\nemits stime\nenol lone\ner re\nera are\nere ere\nergo ogre\neros sore\nervil livre\neta ate\netas sate\netna ante\neve eve\neven neve\nevil live\neviler relive\newe ewe\neye eye\nfer ref\nfila alif\nfires serif\nfled delf\nflog golf\nflow wolf\nfool loof\ngab bag\ngad dag\ngag gag\ngal lag\ngals slag\ngam mag\ngan nag\ngar rag\ngarb brag\ngas sag\ngat tag\ngats stag\ngel leg\ngelder redleg\nget teg\ngib big\ngid dig\ngig gig\ngip pig\ngirt trig\ngnar rang\ngnat tang\ngnats stang\ngnaws swang\ngnus sung\ngob bog\ngod dog\ngolf flog\ngot tog\ngrub burg\ngul lug\ngulp plug\nguls slug\ngum mug\ngums smug\nguns snug\ngut tug\nha ah\nhabus subah\nhad dah\nhah hah\nhahs shah\nhalalah halalah\nhales selah\nhallah hallah\nhap pah\nhay yah\nhe eh\nhey yeh\nho oh\nhoop pooh\nhop poh\nhuh huh\nimaged degami\nis si\nit ti\njar raj\nkaiak kaiak\nkay yak\nkayak kayak\nkeek keek\nkeel leek\nkeels sleek\nkeep peek\nkeets steek\nkips spik\nknaps spank\nknar rank\nknits stink\nkook kook\nlab bal\nlaced decal\nladed dedal\nlag gal\nlager regal\nlaid dial\nlair rial\nlamina animal\nlap pal\nlares seral\nlarum mural\nlas sal\nlaud dual\nled del\nlee eel\nleek keel\nleer reel\nlees seel\nleets steel\nleg gel\nleper repel\nleud duel\nlevel level\nlever revel\nlevins snivel\nliar rail\nliard drail\nlied deil\nlin nil\nlion noil\nlira aril\nlit til\nlive evil\nlived devil\nlivre ervil\nlobo obol\nlone enol\nloof fool\nloom mool\nloons snool\nloop pool\nloops spool\nloot tool\nlooter retool\nloots stool\nlop pol\nlotos sotol\nlug gul\nma am\nmac cam\nmacs scam\nmad dam\nmadam madam\nmaes seam\nmag gam\nmap pam\nmar ram\nmarc cram\nmarcs scram\nmarram marram\nmart tram\nmat tam\nmaws swam\nmay yam\nme em\nmeed deem\nmeet teem\nmem mem\nmeter retem\nmho ohm\nmid dim\nmils slim\nmim mim\nmined denim\nminim minim\nmir rim\nmis sim\nmod dom\nmom mom\nmon nom\nmood doom\nmool loom\nmoor room\nmoot toom\nmot tom\nmug gum\nmum mum\nmura arum\nmural larum\nmures serum\nmus sum\nmuts stum\nna an\nnab ban\nnag gan\nnamer reman\nnap pan\nnaps span\nneb ben\nneep peen\nnema amen\nnet ten\nneve even\nneves seven\nnew wen\nnib bin\nnil lin\nnimrod dormin\nnip pin\nnips spin\nnit tin\nno on\nnod don\nnoil lion\nnolos solon\nnom mon\nnona anon\nnoon noon\nnos son\nnot ton\nnotes seton\nnow won\nnu un\nnub bun\nnun nun\nnus sun\nnut tun\nnuts stun\noat tao\nobol lobo\nod do\nogre ergo\noh ho\nohm mho\noho oho\non no\noohs shoo\noot too\nos so\notto otto\noud duo\nova avo\now wo\npac cap\npacer recap\npad dap\npah hap\npal lap\npals slap\npam map\npan nap\npans snap\npap pap\npar rap\npart trap\nparts strap\npas sap\npat tap\npaw wap\npaws swap\npay yap\npeed deep\npeek keep\npeels sleep\npeen neep\npeep peep\npees seep\npep pep\nper rep\npets step\npig gip\npin nip\npins snip\npip pip\npis sip\npit tip\nplug gulp\npoh hop\npol lop\npols slop\npooh hoop\npool loop\npools sloop\npoons snoop\npoop poop\npop pop\nport trop\nports strop\npot top\npots stop\npow wop\npows swop\nprat tarp\nprod dorp\npud dup\npup pup\npupils slipup\npuris sirup\npus sup\nput tup\nradar radar\nrag gar\nraga agar\nrail liar\nraj jar\nraja ajar\nram mar\nrang gnar\nranid dinar\nrank knar\nrap par\nraps spar\nrat tar\nrats star\nraw war\nray yar\nre er\nrebus suber\nrebut tuber\nrecap pacer\nrecaps spacer\nredder redder\nredes seder\nredia aider\nredips spider\nredleg gelder\nredraw warder\nredrawer rewarder\nreed deer\nreel leer\nrees seer\nref fer\nrefed defer\nrefer refer\nreflet telfer\nreflow wolfer\nregal lager\nregna anger\nreified deifier\nreifier reifier\nreined denier\nreknit tinker\nreknits stinker\nrelaid dialer\nrelit tiler\nrelive eviler\nreman namer\nremeet teemer\nremit timer\nrennet tenner\nrep per\nrepaid diaper\nrepaper repaper\nrepel leper\nrepins sniper\nres ser\nretem meter\nretool looter\nrevel lever\nreviled deliver\nreviver reviver\nreward drawer\nrewarder redrawer\nrial lair\nrim mir\nrime emir\nrod dor\nrood door\nroom moor\nrot tor\nrotator rotator\nrotor rotor\nrub bur\nsab bas\nsag gas\nsaga agas\nsagas sagas\nsal las\nsallets stellas\nsap pas\nsaps spas\nsat tas\nsate etas\nsaved devas\nsaw was\nscam macs\nscares seracs\nscram marcs\nscud ducs\nseam maes\nsecret terces\nseder redes\nsedile elides\nseed dees\nseeks skees\nseel lees\nseep pees\nseer rees\nsees sees\nseined denies\nselah hales\nselahs shales\nselles selles\nseme emes\nsememes sememes\nsemes semes\nsemina animes\nsenega agenes\nser res\nsera ares\nserac cares\nseracs scares\nseral lares\nseres seres\nserif fires\nserum mures\nseta ates\nseton notes\nseven neves\nsexed dexes\nsexes sexes\nshad dahs\nshah hahs\nshahs shahs\nshales selahs\nshoo oohs\nsi is\nsib bis\nsim mis\nsima amis\nsip pis\nsirra arris\nsirs sris\nsirup puris\nsis sis\nsit tis\nsix xis\nskees seeks\nskeets steeks\nskips spiks\nskua auks\nslab bals\nslag gals\nslap pals\nsled dels\nsleek keels\nsleep peels\nsleeps speels\nsleets steels\nslim mils\nslipup pupils\nslit tils\nsloid diols\nsloop pools\nsloops spools\nslop pols\nslug guls\nsmart trams\nsmug gums\nsmuts stums\nsnap pans\nsnaps spans\nsnaw wans\nsnawed dewans\nsnaws swans\nsned dens\nsnib bins\nsnip pins\nsniper repins\nsnips spins\nsnit tins\nsnivel levins\nsnool loons\nsnoop poons\nsnoops spoons\nsnoot toons\nsnot tons\nsnow wons\nsnub buns\nsnug guns\nso os\nsob bos\nsod dos\nsoda ados\nsolon nolos\nsolos solos\nson nos\nsore eros\nsos sos\nsotol lotos\nsow wos\nspacer recaps\nspan naps\nspank knaps\nspans snaps\nspar raps\nspas saps\nspat taps\nspay yaps\nspeed deeps\nspeels sleeps\nspider redips\nspik kips\nspiks skips\nspin nips\nspins snips\nspirt trips\nspirts strips\nspit tips\nspool loops\nspools sloops\nspoons snoops\nsports strops\nspot tops\nspots stops\nsprat tarps\nsprits stirps\nspud dups\nsris sirs\nstab bats\nstag gats\nstang gnats\nstar rats\nstared derats\nstaw wats\nsteek keets\nsteeks skeets\nsteel leets\nsteels sleets\nstellas sallets\nstep pets\nstets stets\nstew wets\nstime emits\nstink knits\nstinker reknits\nstirps sprits\nstob bots\nstool loots\nstop pots\nstoped depots\nstops spots\nstow wots\nstows swots\nstrap parts\nstraw warts\nstressed desserts\nstria airts\nstrid dirts\nstrips spirts\nstrop ports\nstrops sports\nstrow worts\nstruts sturts\nstub buts\nstum muts\nstums smuts\nstun nuts\nsturts struts\nsub bus\nsubah habus\nsuber rebus\nsum mus\nsun nus\nsung gnus\nsup pus\nswam maws\nswang gnaws\nswans snaws\nswap paws\nsward draws\nswat taws\nsway yaws\nswob bows\nswop pows\nswot tows\nswots stows\nta at\ntab bat\ntae eat\ntag gat\ntam mat\ntang gnat\ntao oat\ntap pat\ntaps spat\ntar rat\ntared derat\ntarp prat\ntarps sprat\ntas sat\ntat tat\ntav vat\ntaw wat\ntaws swat\nteem meet\nteemer remeet\nteg get\ntelfer reflet\nten net\ntenet tenet\ntenner rennet\nterces secret\nterret terret\ntew wet\nti it\ntide edit\ntil lit\ntiler relit\ntils slit\ntime emit\ntimed demit\ntimer remit\ntin nit\ntinker reknit\ntins snit\ntip pit\ntips spit\ntis sit\ntit tit\ntod dot\ntog got\ntom mot\nton not\ntons snot\ntoo oot\ntool loot\ntoom moot\ntoons snoot\ntoot toot\ntop pot\ntoped depot\ntops spot\ntor rot\ntort trot\ntot tot\ntow wot\ntows swot\ntrad dart\ntram mart\ntrams smart\ntrap part\ntressed dessert\ntrig girt\ntrips spirt\ntrop port\ntrot tort\ntrow wort\ntub but\ntuba abut\ntubed debut\ntuber rebut\ntug gut\ntun nut\ntup put\ntut tut\nun nu\nvat tav\nvav vav\nwad daw\nwans snaw\nwap paw\nwar raw\nward draw\nwarder redraw\nwarts straw\nwas saw\nwat taw\nwats staw\nwaw waw\nway yaw\nwed dew\nwen new\nwet tew\nwets stew\nwo ow\nwolf flow\nwolfer reflow\nwon now\nwons snow\nwop pow\nwort trow\nworts strow\nwos sow\nwot tow\nwots stow\nwow wow\nxis six\nya ay\nyah hay\nyak kay\nyam may\nyap pay\nyaps spay\nyar ray\nyard dray\nyaw way\nyaws sway\nyay yay\nyeh hey\n"
    }
   ]
  }
 }
]