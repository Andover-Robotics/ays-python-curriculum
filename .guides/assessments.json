[
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-348386203",
  "source": {
   "name": "How many seconds?",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "42 minutes multiplied by 60 seconds per minute is 2520 seconds.  Adding 42 seconds provides a total of 2,562 seconds.",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/seconds.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Create a print statement that will output the number of seconds in 42 minutes and 42 seconds.",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "2562"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2635110836",
  "source": {
   "name": "How many miles?",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "To convert 10 KM to miles, you would divide the number of kilometers by 1.61 to come up with 6.211180124223602",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/miles.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Create a print statement to answer this question.  How many miles are there in 10 kilometers? \n\nHint: there are 1.61 kilometers in a mile.",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "6.211180124223602"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-531739677",
  "source": {
   "name": "Pace",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "Pace in minutes per mile: 7.003500000000001\nAverage speed in mph: 8.567144998929106",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Start the Python interpreter and use it as a calculator.\n\nIf you run a 10 kilometer race in 42 minutes 42 seconds, what is your average pace (time per mile in minutes and seconds)? \n\nWhat is your average speed in miles per hour?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": true,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "97c72b3c-c005-b3f8-9ee7-0db53e8a9d0f",
     "correct": true,
     "answer": "7.003500000000001 minutes per mile"
    },
    {
     "_id": "e2513cee-72cd-bd0e-b8dc-3d3eb24b2b20",
     "correct": false,
     "answer": "8.567144998929106 minutes per mile"
    },
    {
     "_id": "68b73df6-92e5-fe87-6d76-f91ea3e97685",
     "correct": true,
     "answer": "8.567144998929106 miles per hour"
    },
    {
     "_id": "06cc1ae0-4abf-3d83-814a-312087afb3c1",
     "correct": false,
     "answer": "7.003500000000001 miles per hour"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3528825702",
  "source": {
   "name": "print statement syntax",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "<<<syntax error>>>",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Fill in the blank",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "In a print statement, what happens if you leave out one of the parentheses, or both? <<<Syntax Error>>>",
   "tokens": {
    "blank": [
     "Syntax Error"
    ],
    "text": [
     "In a print statement, what happens if you leave out one of the parentheses, or both? ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1373369433",
  "source": {
   "name": "Printing Strings",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "<<< EOL while scanning string literal >>>",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Fill in the Blank",
   "points": "1",
   "showValues": true,
   "learningObjectives": "",
   "text": "If you are trying to print a string, what happens if you leave out one of the quotation marks, or both? <<<String is converted to an integer>>> <<<EOL while scanning string literal>>>",
   "tokens": {
    "blank": [
     "String is converted to an integer",
     "EOL while scanning string literal"
    ],
    "text": [
     "If you are trying to print a string, what happens if you leave out one of the quotation marks, or both? ",
     0,
     " ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-2478628783",
  "source": {
   "name": "Print strings",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "EOL while scanning string literal",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "If you are trying to print a string, what happens if you leave out one of the quotation marks, or both?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "f0f837a7-2e9c-b69d-709d-520f4733e8b0",
     "correct": true,
     "answer": "EOL while scanning string literal"
    },
    {
     "_id": "d9b98fc3-47a4-9ea5-7e09-17020070ca0c",
     "correct": false,
     "answer": "String is converted to an integer"
    },
    {
     "_id": "cc5e5e56-84a3-55e4-c237-574dc35e3924",
     "correct": false,
     "answer": "Python automatically adds the closing quotation mark when the code is run"
    },
    {
     "_id": "4d1822a2-0285-a0f4-3d90-8444501e5b42",
     "correct": false,
     "answer": "A warning is generated during compilation"
    }
   ]
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2898918383",
  "source": {
   "name": "Signed numbers",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "You can use a minus sign to make a negative number like <span>-2</span>. What happens if you put a plus sign before a number? What about <span>2++2</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3158916856",
  "source": {
   "name": "Leading zeros",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": true,
   "oneTimeTest": true,
   "instructions": "In math notation, leading zeros are ok, as in <span>02</span>. What happens if you try this in Python?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-705754624",
  "source": {
   "name": "No operator",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What happens if you have two values with no operator between them?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3182075523",
  "source": {
   "name": "Assignment statements",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Weâ€™ve seen that <span>n = 42</span> is legal. What about <span>42 = n</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1000159001",
  "source": {
   "name": "Multiple assignment",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "How about <span>x = y = 1</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-701808485",
  "source": {
   "name": "Line endings",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "In some languages every statement ends with a semi-colon, <span>;</span>. What happens if you put a semi-colon at the end of a Python statement?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2242469399",
  "source": {
   "name": "Statement endings",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What if you put a period at the end of a statement?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2370220429",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "In math notation you can multiply x and y like this: xy. What happens if you try that in Python?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1799092468",
  "source": {
   "name": "Calculate volume",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercises_2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "The volume of a sphere with radius $r$ is $\\frac{4}{3} \\pi r^3$. What is the volume of a sphere with radius 5?",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "523.5987755982989"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-147802722",
  "source": {
   "name": "Shipping costs",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercises_2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Suppose the cover price of a book is 24.95, but bookstores get a 40 percent discount. Shipping costs 3 dollars for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "945.45"
    }
   ]
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1517147772",
  "source": {
   "name": "How long?",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "7:30:06",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": true,
   "oneTimeTest": true,
   "instructions": "If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3367323985",
  "source": {
   "name": "Time components",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "Answers will vary based on current time when student runs the exercise",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Write a script that reads the current time and converts it to a time of day in hours, minutes, and seconds, plus the number of days since the epoch.",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3828640500",
  "source": {
   "name": "Calling recursively",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What would happen if you called this function like this: <span>recurse(-1, 0)</span>?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1474599446",
  "source": {
   "name": "docstring",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Write a docstring that explains everything someone would need to know in order to use this function (and nothing else).",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-1222847010",
  "source": {
   "name": "Stack",
   "showName": true,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "What does the program print?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-3413124657",
  "source": {
   "name": "Function 1",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase1(s):\n             for c in s:\n                 if c.islower():\n                     return True\n                 else:\n                     return False",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-180072190",
  "source": {
   "name": "function 2",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase2(s):\n            for c in s:\n                if 'c'.islower():\n                    return 'True'\n                else:\n                    return 'False' ",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-920992499",
  "source": {
   "name": "Function 3",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase3(s):\n        for c in s:\n            flag = c.islower()\n        return flag",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2821882119",
  "source": {
   "name": "Function 4",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase4(s):\n        flag = False\n        for c in s:\n            flag = flag or c.islower()\n        return flag",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2364923939",
  "source": {
   "name": "Function 5",
   "showName": false,
   "bloomsObjectiveLevel": "2",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "    def any_lowercase5(s):\n        for c in s:\n            if not c.islower():\n                return False\n        return True",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "free-text",
  "taskId": "free-text-2592942619",
  "source": {
   "name": "Counting Words in a List",
   "showName": true,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "arePartialPointsAllowed": false,
   "oneTimeTest": true,
   "instructions": "Write a function that reads the file <span>words.txt</span> and builds a list with one element per word. Write two versions of this function, one using the <span>append</span> method and the other using the idiom <span>t = t + [x]</span>. Which one takes longer to run? Why?",
   "learningObjectives": "",
   "previewType": "NONE",
   "points": 1
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3217928902",
  "source": {
   "name": "Calculate Volume of Sphere",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The volume of a sphere with a radius $r$ is $\\frac{4}{3} \\pi r^3$. What is the volume (rounded to the nearest hundredth) of a sphere with radius 5?  <<<523.60>>>",
   "tokens": {
    "blank": [
     "523.60"
    ],
    "text": [
     "The volume of a sphere with a radius $r$ is $\\frac{4}{3} \\pi r^3$. What is the volume (rounded to the nearest hundredth) of a sphere with radius 5?  ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4145336160",
  "source": {
   "name": "Total Cost",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "$945.45",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "Suppose the cover price of a book is 24.95, but bookstores get a 40 percent discount. Shipping costs 3 dollars for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?  $<<<945.45>>>",
   "tokens": {
    "blank": [
     "945.45"
    ],
    "text": [
     "Suppose the cover price of a book is 24.95, but bookstores get a 40 percent discount. Shipping costs 3 dollars for the first copy and 75 cents for each additional copy. What is the total wholesale cost for 60 copies?  $",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3179500375",
  "source": {
   "name": "How many seconds?",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "42 minutes multiplied by 60 seconds per minute is 2520 seconds.  Adding 42 seconds provides a total of 2,562 seconds.",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "How many seconds are there in 42 minutes 42 seconds?",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "<<<2562>>> seconds",
   "tokens": {
    "blank": [
     "2562"
    ],
    "text": [
     0,
     " seconds"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-3528387349",
  "source": {
   "name": "How many miles?",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "To convert 10 KM to miles, you would divide the number of kilometers by 1.61 to come up with 6.211180124223602",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "instructions": "",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "How many miles are there in 10 kilometers? \n\nHint: there are 1.61 kilometers in a mile.\n\n<<<6.211180124223602>>> miles",
   "tokens": {
    "blank": [
     "6.211180124223602"
    ],
    "text": [
     "How many miles are there in 10 kilometers? \n\nHint: there are 1.61 kilometers in a mile.\n\n",
     0,
     " miles"
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1457711782",
  "source": {
   "name": "Leading Zeros",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "In math notation, leading zeros are ok, as in <span>02</span>. What happens if you try this in Python?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "c434b93f-37e8-f5d0-46bf-16b1d3d50027",
     "correct": false,
     "answer": "It works the same as math notation"
    },
    {
     "_id": "1b39a293-c097-73d3-d48a-1f50411166a8",
     "correct": true,
     "answer": "SyntaxError: invalid token"
    },
    {
     "_id": "2f13c001-8d0e-27d1-cb20-82ef26560879",
     "correct": false,
     "answer": "SyntaxError: invalid syntax"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-4178934980",
  "source": {
   "name": "No operator",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "What happens if you have two values with no operator between them?\n",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal prints <<<SyntaxError: invalid syntax>>>",
   "tokens": {
    "blank": [
     "SyntaxError: invalid syntax"
    ],
    "text": [
     "The terminal prints ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1060167938",
  "source": {
   "name": "How long?",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "If I leave my house at 6:52 am and run 1 mile at an easy pace (8:15 per mile), then 3 miles at tempo (7:12 per mile) and 1 mile at easy pace again, what time do I get home for breakfast?\n",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "<<<07>>>:<<<30>>>:<<<06>>> am\n\n(include leading zeros)",
   "tokens": {
    "blank": [
     "07",
     "30",
     "06"
    ],
    "text": [
     0,
     ":",
     0,
     ":",
     0,
     " am\n\n(include leading zeros)"
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-182777174",
  "source": {
   "name": "Assignment Syntax",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "Weâ€™ve seen that <span>n = 42</span> is legal. What about <span>42 = n</span>?",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal outputs <<<SyntaxError: can't assign to literal>>>",
   "tokens": {
    "blank": [
     "SyntaxError: can't assign to literal"
    ],
    "text": [
     "The terminal outputs ",
     0
    ]
   }
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-3014115606",
  "source": {
   "name": "Multiple Assignments",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "How about <span>x = y = 1</span>?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "cf52b294-166f-348f-d841-35fca345f265",
     "correct": false,
     "answer": "SyntaxError: can't assign to literal"
    },
    {
     "_id": "9f94ffea-d382-4679-675f-a7ea86ea3339",
     "correct": false,
     "answer": "SyntaxError: invalid syntax"
    },
    {
     "_id": "e1d6f12f-d8d1-1a3b-8c8d-82d1f444c972",
     "correct": true,
     "answer": "The program assigns 1 to both x and y"
    },
    {
     "_id": "26df8b05-d433-a494-e4d9-cfce2aa97809",
     "correct": false,
     "answer": "NameError"
    }
   ]
  }
 },
 {
  "type": "multiple-choice",
  "taskId": "multiple-choice-1574873620",
  "source": {
   "name": "Line Endings",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "In some languages every statement ends with a semi-colon, ;. What happens if you put a semi-colon at the end of a Python statement?",
   "points": "1",
   "incorrectPoints": "0",
   "multipleResponse": false,
   "learningObjectives": "",
   "answers": [
    {
     "_id": "49587692-30c2-5cb4-d415-27c3d726c978",
     "correct": false,
     "answer": "SyntaxError: invalid syntax"
    },
    {
     "_id": "41f8d443-3b4c-e4ce-8ab5-1cc10d1f00ea",
     "correct": false,
     "answer": "SyntaxError: invalid token"
    },
    {
     "_id": "d520dcce-8fd2-121a-3814-6727d486038b",
     "correct": false,
     "answer": "NameError"
    },
    {
     "_id": "913d8867-b4a7-a02f-5b21-4e290788f3e1",
     "correct": true,
     "answer": "The program works as expected"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1056791596",
  "source": {
   "name": "Statement Endings",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "What if you put a period at the end of a statement?\n",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal outputs <<<SyntaxError: invalid syntax>>>",
   "tokens": {
    "blank": [
     "SyntaxError: invalid syntax"
    ],
    "text": [
     "The terminal outputs ",
     0
    ]
   }
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-2614494355",
  "source": {
   "name": "Multiplication",
   "showName": true,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": true,
   "instructions": "In math notation you can multiply x and y like this: xy. What happens if you try that in Python?",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "The terminal outputs <<<NameError: name 'xy' is not defined>>>",
   "tokens": {
    "blank": [
     "NameError: name 'xy' is not defined"
    ],
    "text": [
     "The terminal outputs ",
     0
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3425152502",
  "source": {
   "name": "exercise_3.1",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/function_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your program so the computer can test it. \n\n        right_justify(input())\n\nThen check your code by clicking the button below",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "monty",
     "output": "                                                                 monty"
    },
    {
     "arguments": "",
     "input": "monkies",
     "output": "                                                               monkies"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3951927146",
  "source": {
   "name": "exercise_3.2",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/do_four.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_3-2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function call you have at the end of your script with the following:\n\n    do_four(print_twice, input())\n\nThen, submit your code by clicking the button below",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "spam",
     "output": "spam\nspam\nspam\nspam\nspam\nspam\nspam\nspam"
    },
    {
     "arguments": "",
     "input": "cat",
     "output": "cat\ncat\ncat\ncat\ncat\ncat\ncat\ncat"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-591127166",
  "source": {
   "name": "exercise_3.3",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/grid.py>. Credit: This exercise is based on an exercise in Oualline, <span>*Practical C Programming, Third Edition*</span>, Oâ€™Reilly Media, 1997.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_3-3.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Submit your code by clicking the button below.",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "+ - - - - + - - - - +\n|         |         |\n|         |         |\n|         |         |\n|         |         |\n+ - - - - + - - - - +\n|         |         |\n|         |         |\n|         |         |\n|         |         |\n+ - - - - + - - - - +"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-145839972",
  "source": {
   "name": "exercise5.2",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_5-2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Remove any user prompts from your code (so the user types each number followed by enter with nothing printing).\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "3\n4\n5\n2",
     "output": "No, that doesnâ€™t work."
    },
    {
     "arguments": "",
     "input": "1\n2\n3\n1",
     "output": "Holy smokes, Fermat was wrong!"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3866282499",
  "source": {
   "name": "exercise 5.3",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_5-3.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Remove any user prompts from your code (so the user types each number followed by enter with nothing printing).\n\nThen, submit your code by clicking the button below:\n\n",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "1\n1\n12\n",
     "output": "No"
    },
    {
     "arguments": "",
     "input": "3\n4\n5",
     "output": "Yes"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1992895610",
  "source": {
   "name": "exercise 6.2",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/ackermann.py>. ",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercises_4.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    ack(input(),input())\n\nThen, submit your code using the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "3\n3\n",
     "output": "61"
    },
    {
     "arguments": "",
     "input": "3\n4\n",
     "output": "125"
    },
    {
     "arguments": "",
     "input": "0\n0\n",
     "output": "1"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-758402567",
  "source": {
   "name": "exercise 6.3",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/palindrome_soln.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/palindrome.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    print(is_palindrome(input()))\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "racecar",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "banana",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-2496986975",
  "source": {
   "name": "exercise 6.4",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exercise_6-4.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    print(is_power(input()))\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "8\n2",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "10\n2",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1894224389",
  "source": {
   "name": "exercise 6.5",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/gcd.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Replace any function calls at the end of your code with the following:\n\n    gcd( input(), input() )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "8\n4\n",
     "output": "4"
    },
    {
     "arguments": "",
     "input": "12\n8\n",
     "output": "4\n"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-18622402",
  "source": {
   "name": "exercise 7.2",
   "showName": false,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/eval_loop.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "1 + 2 * 3\ndone\n",
     "output": "7"
    },
    {
     "arguments": "",
     "input": "2**3\ndone",
     "output": "8"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1310791755",
  "source": {
   "name": "exercise 8.3",
   "showName": false,
   "bloomsObjectiveLevel": "3",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/new_palindrome.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line to your code at the end and make sure your one-line palindrome check is inside a function called `is_palindrome()` which takes a string as a parameter and returns whether it is (True) or not (False).\n\n    print( is_palindrome( input() ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "racecar",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "banana",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-420630043",
  "source": {
   "name": "exercise 8.5",
   "showName": false,
   "bloomsObjectiveLevel": "6",
   "guidance": "Solution: <http://thinkpython2.com/code/rotate.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/caesar.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line to the end of your code:\n\n    print( rotate_word( input(), int(input()) ) )\n\nThen, submit your code by pressing the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "cheer\n7",
     "output": "jolly"
    },
    {
     "arguments": "",
     "input": "melon\n-10",
     "output": "cubed"
    },
    {
     "arguments": "",
     "input": "IBM\n-1",
     "output": "HAL"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-887892343",
  "source": {
   "name": "exercise 9.7",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/cartalk1.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "preExecuteCommand": "",
   "command": "python3 code/cartalk.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Once your program prints out all the three consecutive double letter words in words.txt, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "bookkeeper\nbookkeepers\nbookkeeping\nbookkeepings"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1362944689",
  "source": {
   "name": "exercise 9.8",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/cartalk2.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/cartalk2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Once your program prints out all the odometer readings, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "198888\n199999"
    }
   ]
  }
 },
 {
  "type": "fill-in-the-blanks",
  "taskId": "fill-in-the-blanks-1157571896",
  "source": {
   "name": "exercise 9.9",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/cartalk3.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": true,
   "instructions": "When you think you know the answer, fill in the ages below.",
   "points": "1",
   "showValues": false,
   "learningObjectives": "",
   "text": "Right now, the question asker is <<<57>>> years old and their mother is <<<75>>> years old.",
   "tokens": {
    "blank": [
     "57",
     "75"
    ],
    "text": [
     "Right now, the question asker is ",
     0,
     " years old and their mother is ",
     0,
     " years old."
    ]
   }
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-494022662",
  "source": {
   "name": "exercise 10.1",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    nested_sum( eval(input()) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[ [1],[2],[3]]",
     "output": "6"
    },
    {
     "arguments": "",
     "input": "[[1,2],[3,4],[5]]",
     "output": "15"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1457472805",
  "source": {
   "name": "exercise 10.2",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    cumsum( eval(input()) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[2, 4, 6]",
     "output": "[2, 6, 12]"
    },
    {
     "arguments": "",
     "input": "[1, 3, 5]",
     "output": "[1, 4, 9]"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3748038241",
  "source": {
   "name": "exercise 10.3",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    middle( eval(input()) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1,2,3,4]",
     "output": "[2, 3]"
    },
    {
     "arguments": "",
     "input": "[5, 6, 7]",
     "output": "[6]"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1149399147",
  "source": {
   "name": "exercise 10.4 ",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    temp = eval(input())\n    chop( temp )\n    print(temp)\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3, 4]",
     "output": "[2, 3]"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3000215543",
  "source": {
   "name": "exercise 10.5",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists/exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( is_sorted( eval(input()) ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3]",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "[5, 4, 3, 2, 1]",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3887924794",
  "source": {
   "name": "exercise 10.6",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "",
   "showGuidanceAfterResponse": false,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( is_anagram(input(), input() ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "astronomer\nmoon starer\n",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "the eyes\nthey see\n",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "dog\ncat\n",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-3268379659",
  "source": {
   "name": "exercise 10.7",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "You can download solutions to these exercises from <http://thinkpython2.com/code/list_exercises.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/lists_exercises.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( has_duplicates( eval( input() ) ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3]",
     "output": "False"
    },
    {
     "arguments": "",
     "input": "[1, 2, 2, 3]",
     "output": "True"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1428225196",
  "source": {
   "name": "exercise 10.10",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/inlist.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/bisection.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following to the end of your program:\n    \n    word_list = []\n    fin = open('words.txt')\n    for line in fin:\n        word = line.strip()\n        word_list.append(word)\n    print(in_bisect(word_list, input()))\n\nThen click the button below to submit your program:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "alien\n",
     "output": "True"
    },
    {
     "arguments": "",
     "input": "allen\n",
     "output": "False"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-150852830",
  "source": {
   "name": "exercise 10.11",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/reverse_pair.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/reverse_pair_try.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "aa aa\naba aba\nabut tuba\nad da\nados soda\naga aga\nagar raga\nagas saga\nagenes senega\nah ha\naha aha\naider redia\nairts stria\najar raja\nala ala\nalif fila\nalula alula\nam ma\nama ama\namen nema\namis sima\nan na\nana ana\nanger regna\nanimal lamina\nanimes semina\nanna anna\nanon nona\nante etna\nare era\nares sera\naril lira\narris sirra\narum mura\nat ta\nate eta\nates seta\nauks skua\nava ava\navid diva\navo ova\nawa awa\nay ya\nbad dab\nbag gab\nbal lab\nbals slab\nban nab\nbard drab\nbas sab\nbat tab\nbats stab\nbed deb\nben neb\nbib bib\nbid dib\nbig gib\nbin nib\nbins snib\nbird drib\nbis sib\nbob bob\nbog gob\nboob boob\nbos sob\nbots stob\nbows swob\nbrad darb\nbrag garb\nbub bub\nbud dub\nbun nub\nbuns snub\nbur rub\nburd drub\nburg grub\nbus sub\nbut tub\nbuts stub\ncam mac\ncap pac\ncares serac\ncivic civic\ncod doc\ncram marc\ncud duc\nda ad\ndab bad\ndad dad\ndag gad\ndah had\ndahs shad\ndam mad\ndap pad\ndarb brad\ndart trad\ndaw wad\ndeb bed\ndebut tubed\ndecal laced\ndedal laded\ndeed deed\ndeem meed\ndeep peed\ndeeps speed\ndeer reed\ndees seed\ndefer refed\ndegami imaged\ndeified deified\ndeifier reified\ndeil lied\ndeke eked\ndeked deked\ndel led\ndeled deled\ndelf fled\ndeliver reviled\ndels sled\ndemit timed\ndenier reined\ndenies seined\ndenim mined\ndenned denned\ndens sned\ndepot toped\ndepots stoped\nderat tared\nderats stared\ndessert tressed\ndesserts stressed\ndevas saved\ndevil lived\ndew wed\ndewans snawed\ndewed dewed\ndexes sexed\ndial laid\ndialer relaid\ndiaper repaid\ndib bid\ndid did\ndig gid\ndim mid\ndinar ranid\ndiols sloid\ndirts strid\ndiva avid\ndo od\ndoc cod\ndog god\ndom mod\ndon nod\ndoom mood\ndoor rood\ndor rod\ndormin nimrod\ndorp prod\ndos sod\ndot tod\ndrab bard\ndrail liard\ndraw ward\ndrawer reward\ndraws sward\ndray yard\ndrib bird\ndrub burd\ndual laud\ndub bud\nduc cud\nducs scud\ndud dud\nduel leud\nduo oud\ndup pud\ndups spud\neat tae\nedile elide\nedit tide\neel lee\neh he\neke eke\neked deke\nelide edile\nelides sedile\nem me\neme eme\nemes seme\nemir rime\nemit time\nemits stime\nenol lone\ner re\nera are\nere ere\nergo ogre\neros sore\nervil livre\neta ate\netas sate\netna ante\neve eve\neven neve\nevil live\neviler relive\newe ewe\neye eye\nfer ref\nfila alif\nfires serif\nfled delf\nflog golf\nflow wolf\nfool loof\ngab bag\ngad dag\ngag gag\ngal lag\ngals slag\ngam mag\ngan nag\ngar rag\ngarb brag\ngas sag\ngat tag\ngats stag\ngel leg\ngelder redleg\nget teg\ngib big\ngid dig\ngig gig\ngip pig\ngirt trig\ngnar rang\ngnat tang\ngnats stang\ngnaws swang\ngnus sung\ngob bog\ngod dog\ngolf flog\ngot tog\ngrub burg\ngul lug\ngulp plug\nguls slug\ngum mug\ngums smug\nguns snug\ngut tug\nha ah\nhabus subah\nhad dah\nhah hah\nhahs shah\nhalalah halalah\nhales selah\nhallah hallah\nhap pah\nhay yah\nhe eh\nhey yeh\nho oh\nhoop pooh\nhop poh\nhuh huh\nimaged degami\nis si\nit ti\njar raj\nkaiak kaiak\nkay yak\nkayak kayak\nkeek keek\nkeel leek\nkeels sleek\nkeep peek\nkeets steek\nkips spik\nknaps spank\nknar rank\nknits stink\nkook kook\nlab bal\nlaced decal\nladed dedal\nlag gal\nlager regal\nlaid dial\nlair rial\nlamina animal\nlap pal\nlares seral\nlarum mural\nlas sal\nlaud dual\nled del\nlee eel\nleek keel\nleer reel\nlees seel\nleets steel\nleg gel\nleper repel\nleud duel\nlevel level\nlever revel\nlevins snivel\nliar rail\nliard drail\nlied deil\nlin nil\nlion noil\nlira aril\nlit til\nlive evil\nlived devil\nlivre ervil\nlobo obol\nlone enol\nloof fool\nloom mool\nloons snool\nloop pool\nloops spool\nloot tool\nlooter retool\nloots stool\nlop pol\nlotos sotol\nlug gul\nma am\nmac cam\nmacs scam\nmad dam\nmadam madam\nmaes seam\nmag gam\nmap pam\nmar ram\nmarc cram\nmarcs scram\nmarram marram\nmart tram\nmat tam\nmaws swam\nmay yam\nme em\nmeed deem\nmeet teem\nmem mem\nmeter retem\nmho ohm\nmid dim\nmils slim\nmim mim\nmined denim\nminim minim\nmir rim\nmis sim\nmod dom\nmom mom\nmon nom\nmood doom\nmool loom\nmoor room\nmoot toom\nmot tom\nmug gum\nmum mum\nmura arum\nmural larum\nmures serum\nmus sum\nmuts stum\nna an\nnab ban\nnag gan\nnamer reman\nnap pan\nnaps span\nneb ben\nneep peen\nnema amen\nnet ten\nneve even\nneves seven\nnew wen\nnib bin\nnil lin\nnimrod dormin\nnip pin\nnips spin\nnit tin\nno on\nnod don\nnoil lion\nnolos solon\nnom mon\nnona anon\nnoon noon\nnos son\nnot ton\nnotes seton\nnow won\nnu un\nnub bun\nnun nun\nnus sun\nnut tun\nnuts stun\noat tao\nobol lobo\nod do\nogre ergo\noh ho\nohm mho\noho oho\non no\noohs shoo\noot too\nos so\notto otto\noud duo\nova avo\now wo\npac cap\npacer recap\npad dap\npah hap\npal lap\npals slap\npam map\npan nap\npans snap\npap pap\npar rap\npart trap\nparts strap\npas sap\npat tap\npaw wap\npaws swap\npay yap\npeed deep\npeek keep\npeels sleep\npeen neep\npeep peep\npees seep\npep pep\nper rep\npets step\npig gip\npin nip\npins snip\npip pip\npis sip\npit tip\nplug gulp\npoh hop\npol lop\npols slop\npooh hoop\npool loop\npools sloop\npoons snoop\npoop poop\npop pop\nport trop\nports strop\npot top\npots stop\npow wop\npows swop\nprat tarp\nprod dorp\npud dup\npup pup\npupils slipup\npuris sirup\npus sup\nput tup\nradar radar\nrag gar\nraga agar\nrail liar\nraj jar\nraja ajar\nram mar\nrang gnar\nranid dinar\nrank knar\nrap par\nraps spar\nrat tar\nrats star\nraw war\nray yar\nre er\nrebus suber\nrebut tuber\nrecap pacer\nrecaps spacer\nredder redder\nredes seder\nredia aider\nredips spider\nredleg gelder\nredraw warder\nredrawer rewarder\nreed deer\nreel leer\nrees seer\nref fer\nrefed defer\nrefer refer\nreflet telfer\nreflow wolfer\nregal lager\nregna anger\nreified deifier\nreifier reifier\nreined denier\nreknit tinker\nreknits stinker\nrelaid dialer\nrelit tiler\nrelive eviler\nreman namer\nremeet teemer\nremit timer\nrennet tenner\nrep per\nrepaid diaper\nrepaper repaper\nrepel leper\nrepins sniper\nres ser\nretem meter\nretool looter\nrevel lever\nreviled deliver\nreviver reviver\nreward drawer\nrewarder redrawer\nrial lair\nrim mir\nrime emir\nrod dor\nrood door\nroom moor\nrot tor\nrotator rotator\nrotor rotor\nrub bur\nsab bas\nsag gas\nsaga agas\nsagas sagas\nsal las\nsallets stellas\nsap pas\nsaps spas\nsat tas\nsate etas\nsaved devas\nsaw was\nscam macs\nscares seracs\nscram marcs\nscud ducs\nseam maes\nsecret terces\nseder redes\nsedile elides\nseed dees\nseeks skees\nseel lees\nseep pees\nseer rees\nsees sees\nseined denies\nselah hales\nselahs shales\nselles selles\nseme emes\nsememes sememes\nsemes semes\nsemina animes\nsenega agenes\nser res\nsera ares\nserac cares\nseracs scares\nseral lares\nseres seres\nserif fires\nserum mures\nseta ates\nseton notes\nseven neves\nsexed dexes\nsexes sexes\nshad dahs\nshah hahs\nshahs shahs\nshales selahs\nshoo oohs\nsi is\nsib bis\nsim mis\nsima amis\nsip pis\nsirra arris\nsirs sris\nsirup puris\nsis sis\nsit tis\nsix xis\nskees seeks\nskeets steeks\nskips spiks\nskua auks\nslab bals\nslag gals\nslap pals\nsled dels\nsleek keels\nsleep peels\nsleeps speels\nsleets steels\nslim mils\nslipup pupils\nslit tils\nsloid diols\nsloop pools\nsloops spools\nslop pols\nslug guls\nsmart trams\nsmug gums\nsmuts stums\nsnap pans\nsnaps spans\nsnaw wans\nsnawed dewans\nsnaws swans\nsned dens\nsnib bins\nsnip pins\nsniper repins\nsnips spins\nsnit tins\nsnivel levins\nsnool loons\nsnoop poons\nsnoops spoons\nsnoot toons\nsnot tons\nsnow wons\nsnub buns\nsnug guns\nso os\nsob bos\nsod dos\nsoda ados\nsolon nolos\nsolos solos\nson nos\nsore eros\nsos sos\nsotol lotos\nsow wos\nspacer recaps\nspan naps\nspank knaps\nspans snaps\nspar raps\nspas saps\nspat taps\nspay yaps\nspeed deeps\nspeels sleeps\nspider redips\nspik kips\nspiks skips\nspin nips\nspins snips\nspirt trips\nspirts strips\nspit tips\nspool loops\nspools sloops\nspoons snoops\nsports strops\nspot tops\nspots stops\nsprat tarps\nsprits stirps\nspud dups\nsris sirs\nstab bats\nstag gats\nstang gnats\nstar rats\nstared derats\nstaw wats\nsteek keets\nsteeks skeets\nsteel leets\nsteels sleets\nstellas sallets\nstep pets\nstets stets\nstew wets\nstime emits\nstink knits\nstinker reknits\nstirps sprits\nstob bots\nstool loots\nstop pots\nstoped depots\nstops spots\nstow wots\nstows swots\nstrap parts\nstraw warts\nstressed desserts\nstria airts\nstrid dirts\nstrips spirts\nstrop ports\nstrops sports\nstrow worts\nstruts sturts\nstub buts\nstum muts\nstums smuts\nstun nuts\nsturts struts\nsub bus\nsubah habus\nsuber rebus\nsum mus\nsun nus\nsung gnus\nsup pus\nswam maws\nswang gnaws\nswans snaws\nswap paws\nsward draws\nswat taws\nsway yaws\nswob bows\nswop pows\nswot tows\nswots stows\nta at\ntab bat\ntae eat\ntag gat\ntam mat\ntang gnat\ntao oat\ntap pat\ntaps spat\ntar rat\ntared derat\ntarp prat\ntarps sprat\ntas sat\ntat tat\ntav vat\ntaw wat\ntaws swat\nteem meet\nteemer remeet\nteg get\ntelfer reflet\nten net\ntenet tenet\ntenner rennet\nterces secret\nterret terret\ntew wet\nti it\ntide edit\ntil lit\ntiler relit\ntils slit\ntime emit\ntimed demit\ntimer remit\ntin nit\ntinker reknit\ntins snit\ntip pit\ntips spit\ntis sit\ntit tit\ntod dot\ntog got\ntom mot\nton not\ntons snot\ntoo oot\ntool loot\ntoom moot\ntoons snoot\ntoot toot\ntop pot\ntoped depot\ntops spot\ntor rot\ntort trot\ntot tot\ntow wot\ntows swot\ntrad dart\ntram mart\ntrams smart\ntrap part\ntressed dessert\ntrig girt\ntrips spirt\ntrop port\ntrot tort\ntrow wort\ntub but\ntuba abut\ntubed debut\ntuber rebut\ntug gut\ntun nut\ntup put\ntut tut\nun nu\nvat tav\nvav vav\nwad daw\nwans snaw\nwap paw\nwar raw\nward draw\nwarder redraw\nwarts straw\nwas saw\nwat taw\nwats staw\nwaw waw\nway yaw\nwed dew\nwen new\nwet tew\nwets stew\nwo ow\nwolf flow\nwolfer reflow\nwon now\nwons snow\nwop pow\nwort trow\nworts strow\nwos sow\nwot tow\nwots stow\nwow wow\nxis six\nya ay\nyah hay\nyak kay\nyam may\nyap pay\nyaps spay\nyar ray\nyard dray\nyaw way\nyaws sway\nyay yay\nyeh hey\n"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-4133651850",
  "source": {
   "name": "exercise 11.4",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/has_duplicates.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/dictionary_1.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Add the following line of code to the end of your script, replacing any function calls:\n\n    print( has_duplicates( eval( input() ) ) )\n\nThen, submit your code by clicking the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": false,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "[1, 2, 3]",
     "output": "False"
    },
    {
     "arguments": "",
     "input": "[1, 2, 2, 3]",
     "output": "True"
    }
   ]
  }
 },
 {
  "type": "code-output-compare",
  "taskId": "code-output-compare-1911792617",
  "source": {
   "name": "exercise 11.5",
   "showName": false,
   "bloomsObjectiveLevel": "",
   "guidance": "Solution: <http://thinkpython2.com/code/rotate_pairs.py>.",
   "showGuidanceAfterResponse": true,
   "showExpectedAnswer": false,
   "preExecuteCommand": "",
   "command": "python3 code/exrotate_2.py",
   "points": 1,
   "oneTimeTest": false,
   "instructions": "Have your code print out the original word, the amount of rotation (from 1 to 14) and the rotated word with a single space in between.\n\nThen, submit your code with the button below:",
   "learningObjectives": "",
   "options": {
    "ignoreCase": true,
    "ignoreWhitespaces": true,
    "ignoreNewline": true,
    "matchSubstring": true,
    "timeout": 30
   },
   "sequence": [
    {
     "arguments": "",
     "input": "",
     "output": "muffs 6 sally\ndew 10 nog\nbaal 3 eddo\ndug 6 jam\nmix 6 sod\nad 1 be\nad 4 eh\nad 11 lo\nrail 13 envy\nmay 2 oca\nnor 1 ops\nnor 6 tux\nwhit 7 dopa\nqua 6 wag\nvie 9 ern\nnod 1 ope\nnod 12 zap\now 8 we\now 12 ai\nsync 6 yeti\nsync 13 flap\nbalk 13 onyx\ngoas 12 same\nluny 6 rate\njehu 10 tore\nbeer 7 illy\nwich 6 coin\ninks 1 jolt\nfit 9 orc\nbed 7 ilk\nhips 12 tube\npip 12 bub\nhymn 6 nest\ndory 3 grub\nvim 6 bos\nluffs 6 rally\nrids 12 dupe\ndawk 8 lies\naxal 3 dado\nwoo 4 ass\ndo 5 it\ndo 12 pa\ndank 4 hero\nlye 2 nag\narm 3 dup\nbomb 6 hush\nreef 13 errs\nweed 10 goon\nsap 4 wet\nweal 8 emit\njin 5 ons\njin 6 pot\nsize 9 brin\nprex 7 wyle\nprex 9 yang\ndib 12 pun\nlib 3 ole\npig 12 bus\nemu 10 owe\nso 8 aw\nhid 12 tup\nwhen 13 jura\nmott 12 yaff\nsecco 10 commy\none 4 sri\none 13 bar\nrape 11 clap\nluna 4 pyre\nflap 13 sync\nredo 10 bony\nrho 1 sip\nbutyl 6 hazer\nlob 3 ore\ncap 4 get\nis 6 oy\ngaen 4 keir\nbods 12 nape\nsen 10 cox\nurn 9 daw\nraphe 11 clasp\ncee 2 egg\ncee 10 moo\nha 7 oh\nha 8 pi\nha 13 un\ntang 13 gnat\nmule 6 sark\nmold 3 prog\nzips 12 lube\nsax 4 web\nebbs 13 roof\ngal 4 kep\npya 6 veg\nfog 6 lum\nfog 12 ras\nher 1 ifs\nher 10 rob\nohms 1 pint\nsris 9 barb\ndey 4 hic\nstun 11 defy\noud 10 yen\nshute 10 credo\nadz 5 fie\nalt 3 dow\ncobb 3 free\nopen 4 stir\norb 3 rue\nohs 1 pit\nohs 12 ate\nova 13 bin\neches 6 kinky\nanna 1 boob\ndab 7 khi\nain 6 got\ntorc 12 fado\nda 4 he\nda 5 if\nda 8 li\nsilk 9 brut\nibex 7 pile\nawl 12 mix\ndap 4 het\nhi 6 no\nhi 7 op\nmills 6 sorry\nhay 8 pig\nfop 9 oxy\njug 6 pam\nbulls 6 harry\naby 3 deb\nvex 9 eng\nvex 10 foh\nvex 13 irk\nlox 3 ora\ndee 1 eff\ndee 10 noo\nsei 10 cos\noh 1 pi\noh 6 un\noh 12 at\nfohn 6 lunt\njiff 6 poll\nhex 4 lib\nhex 7 ole\nfey 10 poi\nwiver 9 frena\nbarf 13 ones\njut 10 ted\nbaff 8 jinn\nrod 12 dap\nbar 13 one\ngassy 12 smeek\ncrag 13 pent\nfor 6 lux\nfor 12 rad\ntav 8 bid\nraps 11 clad\natma 7 hath\ngolly 6 murre\nbis 6 hoy\nmola 3 prod\nails 6 gory\nilk 9 rut\nnun 6 tat\nnun 13 aha\nor 12 ad\nor 13 be\nerr 13 ree\nlin 6 rot\ndip 12 pub\nmunch 6 satin\nnth 11 yes\npung 13 chat\nwheel 7 dolls\nvaw 8 die\ndjin 5 ions\nwo 4 as\ngird 9 pram\nkip 9 try\nfat 8 nib\nend 1 foe\ndeed 10 noon\nsyn 6 yet\npath 11 ales\nseas 8 amia\nsri 9 bar\nsel 13 fry\nshe 13 fur\ngid 12 sup\nsleep 9 bunny\noaf 8 win\nton 1 upo\nnos 1 opt\nslam 2 unco\nion 6 out\ntask 8 bias\nbuy 6 hae\nbuy 10 lei\nfib 12 run\nbe 3 eh\nbe 10 lo\nbe 13 or\njay 8 rig\nbos 12 nae\nperry 13 creel\nwon 6 cut\nka 4 oe\nka 8 si\njinns 6 potty\nicy 2 kea\nmol 3 pro\nhap 4 let\nhap 8 pix\nsheer 1 tiffs\nratan 4 vexer\nhaw 4 lea\nhaw 8 pie\nteloi 3 whorl\ncud 10 men\nodor 1 peps\nhotel 7 ovals\ngulls 6 marry\nbolls 6 hurry\nmut 10 wed\ntoys 12 fake\ncrap 3 fuds\nhoggs 12 tasse\nawn 4 ear\nganja 4 kerne\ngunny 6 matte\nserer 13 frere\ntalk 8 bits\nheil 4 limp\nfrere 13 serer\npry 3 sub\npry 9 yah\nark 3 dun\ngift 12 surf\nrev 9 ane\njus 6 pay\nnag 13 ant\nba 13 on\ntouch 12 fagot\nli 12 xu\njimmy 6 posse\npogy 12 bask\nxu 4 by\nxu 6 da\nxu 10 he\nxu 11 if\nbi 3 el\nbi 6 ho\nbi 12 nu\nmoly 6 sure\nperk 3 shun\npith 11 ates\nnob 13 abo\npa 8 xi\ngip 9 pry\ngip 12 sub\ndodo 6 juju\ndodo 12 papa\nirk 9 rat\nirk 13 vex\nfusion 6 layout\nrei 4 vim\nrei 10 bos\npaw 4 tea\nfrag 13 sent\ntun 10 dex\njog 12 vas\npoh 12 bat\nbuff 6 hall\npia 12 bum\nani 7 hup\nbye 2 dag\nviola 6 bourg\npecan 4 tiger\nswop 4 wast\ngig 6 mom\nvats 11 gled\nsae 8 aim\nom 6 us\nom 12 ay\nperi 3 shul\nalb 3 doe\nlea 4 pie\npi 5 un\npi 11 at\nod 1 pe\nod 4 sh\nod 5 ti\nmuch 6 sain\nfoh 3 irk\nfoh 12 rat\nguts 6 mazy\nloaf 8 twin\nhint 11 stye\nfibs 12 rune\nbud 6 haj\nknar 1 lobs\nmem 10 wow\naril 7 hyps\nkors 12 wade\nfox 12 raj\nink 7 pur\nref 10 bop\nref 13 ers\npuna 4 tyre\nsec 4 wig\njogs 12 vase\nmi 6 so\nsoil 12 eaux\nree 10 boo\nree 13 err\nhuic 6 naoi\nstar 1 tubs\nfon 10 pyx\nvin 6 bot\nmumm 6 sass\nnab 4 ref\nnoggs 6 tummy\nhaes 8 pima\nlit 7 spa\nbob 3 ere\nbob 6 huh\nbod 3 erg\nbod 12 nap\npin 5 uns\nspot 11 daze\nrap 4 vet\nguy 6 mae\nhog 12 tas\nbas 4 few\ndrip 3 guls\nsod 8 awl\nfud 10 pen\ndogs 12 pase\nnowhere 13 abjurer\njet 4 nix\njet 10 tod\nair 6 gox\nair 12 mud\npit 11 ate\nolla 3 rood\nbuffi 6 hallo\nwha 4 ale\nwha 13 jun\ntins 12 fuze\nvis 6 boy\nvis 12 hue\ndaff 8 linn\nhot 7 ova\nply 3 sob\nsad 8 ail\nsue 6 yak\nhag 4 lek\nling 7 spun\ndui 11 oft\nus 6 ay\nled 10 von\ntui 10 des\ntui 11 eft\njew 10 tog\nhewn 4 liar\ncraal 13 penny\njee 10 too\nam 12 my\nsow 8 awe\ntimer 7 aptly\nyank 4 cero\nmulch 6 sarin\nen 10 ox\neats 11 pled\ngreen 13 terra\nbay 8 jig\nvans 8 diva\nrip 12 dub\nkop 12 wab\nhip 12 tub\nroad 12 damp\ntors 12 fade\nlab 3 ode\nboa 6 hug\nproa 3 surd\neme 8 mum\ntrig 9 carp\njohns 6 punty\nhawk 8 pies\nvia 6 bog\nvia 12 hum\njerky 9 snath\nort 13 beg\nitch 11 tens\nops 5 tux\nted 10 don\nkae 8 sim\nhod 12 tap\nnils 6 tory\nache 6 gink\nfeet 10 pood\nlas 4 pew\nlowe 6 ruck\npets 11 aped\nmog 6 sum\nrads 11 clod\nlion 6 rout\nsh 1 ti\nsh 12 et\ndon 5 its\ndon 6 jut\ncloy 3 forb\npurs 13 chef\nfoam 6 lugs\nlink 7 spur\neth 11 pes\npiu 12 bug\nhet 10 rod\nods 1 pet\nods 12 ape\nazon 5 fets\npepo 4 tits\nxeric 9 gnarl\nsewed 10 cogon\newe 8 mem\nrye 2 tag\nrye 10 bio\nvon 6 but\nfumy 6 lase\nwhee 7 doll\nhats 11 sled\npup 6 vav\nczar 1 dabs\ngox 6 mud\nley 4 pic\nla 3 od\nla 4 pe\nla 7 sh\nla 8 ti\nrub 10 bel\nun 6 at\nun 10 ex\nun 13 ha\npea 4 tie\nrep 9 any\nons 1 pot\nmho 1 nip\nmho 10 wry\nwe 4 ai\nwe 8 em\nwe 10 go\nahull 6 gnarr\nloam 6 rugs\nbuts 6 hazy\ntub 10 del\naped 5 fuji\nhaji 11 slut\nfob 3 ire\nfob 12 ran\ntat 7 aha\ntat 8 bib\nbug 6 ham\ndolt 3 grow\naxe 3 dah\naxe 11 lip\ntenet 7 alula\ngel 4 kip\ngel 13 try\ntout 10 dyed\ntrek 9 cant\ncolt 3 frow\nfou 10 pye\nfou 12 rag\nme 10 wo\nut 7 ba\nbatt 8 jibb\nboy 6 hue\nti 11 et\nmar 7 thy\nnee 1 off\nem 2 go\nem 8 mu\nem 10 ow\ntom 12 fay\nice 2 keg\ncaps 2 ecru\nlet 4 pix\nabo 4 efs\nabo 13 nob\nwere 10 gobo\nbee 7 ill\nbee 10 loo\nids 1 jet\nids 5 nix\nids 11 tod\npah 7 who\naff 8 inn\nhods 12 tape\npawn 4 tear\nzax 1 aby\nzax 4 deb\nyar 2 act\nhogg 12 tass\nmid 12 yup\nale 9 jun\nora 13 ben\nfug 6 lam\njinni 6 potto\ntons 12 faze\nrut 10 bed\nthy 13 gul\nope 11 zap\nmim 6 sos\nwen 4 air\nwen 10 gox\ntew 10 dog\nboas 12 name\nabjurer 13 nowhere\nloop 4 psst\npaid 11 alto\ndei 4 him\ndei 10 nos\ndei 11 opt\nodd 1 pee\nodd 4 shh\nodd 11 zoo\nyeti 7 flap\njun 6 pat\njun 13 wha\nlinum 6 rotas\nspots 11 dazed\nslip 9 bury\nwet 10 god\nlo 3 or\noho 1 pip\noho 13 bub\neau 10 oke\nban 4 fer\nbog 6 hum\ngad 8 oil\nghat 13 tung\nup 11 fa\noxim 6 udos\nurea 13 hern\ntog 12 fas\nbo 3 er\nbo 12 na\nones 13 barf\ngowk 8 owes\ngolem 6 murks\nel 3 ho\nel 9 nu\nwee 10 goo\nnoh 6 tun\nfogs 12 rase\nalp 3 dos\ncol 3 fro\nhas 8 pia\noft 12 arf\npixy 3 slab\nnill 6 torr\nin 1 jo\ngum 6 mas\nire 9 ran\neaux 10 okeh\ncoy 12 oak\narf 3 dui\nbrie 9 karn\njohn 6 punt\nvat 8 dib\nshog 12 etas\numps 12 gybe\ners 9 nab\ners 13 ref\nquey 6 wake\nsir 9 bra\ngobs 12 sane\nbyte 10 lido\noe 4 si\nhints 11 styed\nais 6 goy\nnu 6 ta\nnu 13 ah\nfin 6 lot\nhun 10 rex\nfen 10 pox\ndrab 3 gude\nsub 6 yah\ngummy 6 masse\nglib 3 jole\nloch 6 ruin\ncede 10 mono\nhat 4 lex\nail 6 gor\ndor 12 pad\npep 4 tit\nlug 6 ram\nfeed 10 poon\nrat 4 vex\nrat 13 eng\nuredo 10 ebony\nnil 6 tor\nnil 7 ups\nfirs 12 rude\npelt 3 show\nah 1 bi\nah 4 el\nah 7 ho\nah 13 nu\nanteed 1 bouffe\netch 11 pens\nlimy 6 rose\nmanful 7 thumbs\nfils 6 lory\nbyre 9 khan\nhuff 10 repp\nknur 7 ruby\nsent 13 frag\nefs 9 nob\nokeh 4 soil\ngor 12 sad\ntot 7 ava\nwombs 6 cushy\ndaw 8 lie\nlop 3 ors\ngnat 13 tang\ndash 11 olds\ngun 6 mat\nmoa 12 yam\nlane 4 peri\nlane 7 shul\nfur 6 lax\nfur 13 she\nape 11 lap\nterra 13 green\nset 10 cod\nlaw 4 pea\nlaw 8 tie\nbanjo 4 ferns\nonyx 13 balk\nsire 9 bran\nels 2 gnu\nels 9 nub\nelds 9 numb\nego 8 mow\nex 3 ha\nex 10 oh\nex 11 pi\nabet 7 hila\ntho 10 dry\ndanio 4 herms\nyaw 8 gie\nfir 6 lox\nfir 9 ora\norc 12 ado\nberg 9 knap\nbys 6 hey\nfry 13 sel\nlie 9 urn\nawa 12 mim\nlallan 4 pepper\nphew 7 wold\njob 12 van\npulpy 6 varve\nins 1 jot\ncry 2 eta\ncry 3 fub\npas 4 tew\nta 7 ah\nta 8 bi\nta 11 el\nbat 8 jib\nkor 12 wad\nto 1 up\nto 12 fa\neng 1 foh\neng 4 irk\neng 13 rat\ngib 12 sun\ndex 10 noh\negg 8 moo\nben 4 fir\nben 10 lox\nben 13 ora\naga 4 eke\nwit 6 coz\nquay 6 wage\nphi 7 wop\nsera 4 wive\nwiles 6 corky\nits 1 jut\nits 11 ted\navo 5 fat\navo 13 nib\nna 4 re\nna 13 an\npap 11 ala\nriff 12 durr\nays 6 gey\nno 1 op\ngoby 12 sank\nwhir 7 dopy\ndig 12 pus\ntas 11 eld\nizar 1 jabs\nerg 9 nap\nerg 13 ret\nrum 2 two\ndog 12 pas\nbub 6 hah\nbub 13 oho\ndel 4 hip\nkaes 8 sima\nzoa 6 fug\nzoa 12 lam\noar 8 wiz\ndah 8 lip\nhyp 2 jar\ngul 6 mar\ngul 13 thy\nordo 5 twit\net 7 la\net 10 od\net 11 pe\nas 12 me\nboo 3 err\nmuumuu 10 weewee\non 6 ut\non 13 ba\nfun 6 lat\nohm 1 pin\nohm 6 uns\naha 1 bib\naha 13 nun\nambo 12 myna\nsteer 1 tuffs\nant 11 lye\nant 13 nag\npull 4 typp\ndes 1 eft\ndrips 11 octad\nbet 4 fix\nribs 12 dune\nere 3 huh\nruddy 10 benni\nprimero 3 sulphur\nwolf 6 curl\nrem 10 bow\noka 10 yuk\ntip 9 cry\ntip 11 eta\ntip 12 fub\nfang 4 jerk\npat 7 wha\npat 11 ale\nmod 12 yap\nlog 6 rum\nlog 8 two\nan 1 bo\nan 4 er\nan 13 na\nfuji 10 pets\nhae 4 lei\nluau 6 raga\nhen 11 spy\nseed 10 coon\nfills 6 lorry\nhew 7 old\ndoff 12 parr\ndeer 1 effs\nsalp 4 wept\nwis 6 coy\ner 9 na\ner 13 re\nurd 9 dam\nsea 8 ami\ndye 2 fag\ntut 7 aba\nai 4 em\nai 6 go\nai 12 mu\nlap 3 ods\nlap 4 pet\nrear 13 erne\nsew 10 cog\ntypy 2 vara\nroof 13 ebbs\ncedi 10 mons\ninkier 7 purply\nmis 6 soy\ndid 12 pup\ncuss 12 ogee\npsst 12 beef\njuju 6 papa\nginny 6 motte\ntau 11 elf\nfa 3 id\nspit 11 date\nlux 6 rad\nchat 13 pung\ngnar 1 hobs\nhob 12 tan\ntahr 7 ahoy\nnutty 6 tazze\nwits 6 cozy\ngo 6 mu\ngo 8 ow\nups 11 fad\npyic 2 rake\nlang 4 perk\nlang 7 shun\nrah 8 zip\nnulls 6 tarry\ncalk 8 kits\nfas 4 jew\nill 3 loo\npenny 13 craal\nzee 1 aff\nzee 9 inn\npar 7 why\nbiffs 6 holly\nat 4 ex\nat 7 ha\nbop 3 ers\nbop 12 nab\njeed 10 toon\nwad 12 imp\ncord 3 frug\nsix 6 yod\ngulfs 6 marly\nby 2 da\nby 6 he\nby 7 if\nby 10 li\ncubed 10 melon\nhoys 12 take\nleu 10 voe\nuts 11 fed\nfolk 3 iron\nlutea 4 pyxie\noafs 6 ugly\nfons 12 raze\nelk 9 nut\nbun 6 hat\nbun 10 lex\nsetal 8 ambit\nnay 4 rec\nshh 7 zoo\nceil 4 gimp\nriver 9 arena\npily 3 slob\nkoas 12 wame\nsims 8 aqua\nlean 4 pier\nof 12 ar\nlawn 4 pear\nlad 8 til\nwolfs 6 curly\nyom 12 kay\neat 8 mib\norra 13 been\negad 8 moil\npet 11 ape\nmu 2 ow\nmu 10 we\ngoa 6 mug\nhop 12 tab\ndidos 12 pupae\nsee 10 coo\nnib 13 avo\ndrib 9 mark\nrib 9 ark\nrib 12 dun\nbib 12 nun\nbaa 4 fee\nmud 10 wen\nfizzy 5 kneed\njobs 12 vane\ncrib 9 lark\neche 6 kink\nham 8 piu\npuls 6 vary\nfido 5 knit\nslag 2 unci\nifs 9 rob\nhe 1 if\nhe 4 li\nsulk 8 acts\ncot 12 oaf\nhim 6 nos\nhim 7 opt\nbut 10 led\nmom 12 yay\nhem 10 row\npeed 10 zoon\nazo 5 fet\nduly 10 nevi\nhes 10 roc\njoey 6 puke\nyay 8 gig\nalkyd 4 epoch\nwow 8 ewe\ncreel 13 perry\nhide 11 stop\nads 1 bet\nads 5 fix\npops 12 babe\noxter 7 vealy\nbus 6 hay\ngale 4 kepi\nauk 2 cwm\ndom 6 jus\ndom 12 pay\nsemi 10 cows\neld 3 hog\nerrs 13 reef\neta 1 fub\nana 1 bob\nana 4 ere\nana 7 huh\ntung 13 ghat\nbeg 13 ort\ntsk 8 bas\ntsk 12 few\naah 4 eel\ncans 8 kiva\nsos 8 awa\npee 3 shh\npee 10 zoo\nwin 6 cot\nnot 5 sty\nkos 12 wae\nvox 6 bud\nvox 12 haj\ngirl 9 prau\ndol 12 pax\nbig 12 nus\nnisi 6 toyo\nchain 6 ingot\nbum 6 has\njura 13 when\nliny 6 rote\ngym 12 sky\naw 12 mi\npye 2 rag\nos 12 ae\njeu 10 toe\nlax 7 she\nkat 8 sib\nerne 13 rear\ngnu 7 nub\nadd 1 bee\nadd 8 ill\nadd 11 loo\ngoys 12 sake\nbombyx 6 hushed\nray 8 zig\nreed 10 boon\ncub 10 mel\nput 10 zed\nlater 7 shaly\nuta 7 bah\nxi 6 do\nxi 11 it\nfigs 12 ruse\noat 4 sex\noms 12 aye\ncold 3 frog\nidem 10 snow\nnae 4 rei\nnae 8 vim\nspic 9 byrl\ndoxy 3 grab\nef 3 hi\nef 9 no\nef 10 op\nret 10 bod\nret 13 erg\ngin 6 mot\noak 8 wis\njiffs 6 polly\nsag 12 ems\nploy 3 sorb\ntorus 12 fadge\npiny 6 vote\nflu 9 oud\nmir 6 sox\ngoad 12 samp\nho 6 nu\nho 12 ta\nahem 7 holt\nhah 7 oho\nhah 8 pip\nthen 11 espy\nlatex 7 shale\nsawn 4 wear\nfad 8 nil\nmumms 6 sassy\ncrop 3 furs\nmolt 3 prow\ndawn 4 hear\ngids 12 supe\nsic 2 uke\nhut 10 red\nsteeds 1 tuffet\nash 12 met\nhern 13 urea\ntag 8 bio\neff 9 noo\nhade 11 slop\nopal 4 step\ngulf 6 marl\nasp 2 cur\nmun 6 sat\nilex 9 rung\nnome 6 tusk\nboff 6 hull\namu 2 cow\nkhan 8 spiv\nwyle 2 yang\nid 11 to\nid 12 up\nyah 8 gip\nmolas 6 surgy\nwiny 6 cote\nnavy 13 anil\netui 10 odes\ntor 1 ups\ntor 12 fad\ncum 10 mew\nwhew 10 grog\nkoa 4 ose\nmuff 6 sall\nowl 4 sap\nowl 8 wet\njib 6 poh\nbox 3 era\nbin 6 hot\nbin 13 ova\npod 11 azo\nre 9 an\nre 10 bo\nre 13 er\nnix 6 tod\npun 6 vat\nvav 8 did\npele 4 tipi\npent 13 crag\ntsars 8 baiza\ntall 8 bitt\nuse 8 cam\nadds 1 beet\nugh 8 cop\nants 1 bout\nsplits 11 dawted\npe 3 sh\npe 4 ti\ndud 1 eve\nspits 11 dated\nbeef 10 loop\nde 1 ef\nde 4 hi\nde 10 no\nde 11 op\nfet 10 pod\ntab 11 elm\nrid 9 arm\nrid 12 dup\ncapo 4 gets\ndido 12 pupa\nelm 3 hop\nsneer 1 toffs\ndols 6 jury\nenvy 13 rail\ncheer 7 jolly\nser 10 cob\nask 2 cum\nask 12 mew\nif 3 li\nes 8 ma\nnap 4 ret\nlac 4 peg\nado 5 fit\nzebu 7 glib\nzebu 10 jole\npunk 4 tyro\ntry 13 gel\nsal 8 ait\nmocha 6 suing\nwily 6 core\nanil 13 navy\nchef 13 purs\nhub 7 obi\nskua 8 asci\nit 7 pa\nnip 9 wry\nsmog 12 eyas\nhark 4 levo\ndin 5 ins\ndin 6 jot\ngat 4 kex\nmus 6 say\neye 2 gag\nguff 6 mall\nchar 1 dibs\nfoys 10 pyic\nfoys 12 rake\nhep 4 lit\nhep 11 spa\nyen 7 flu\nspiv 9 byre\nars 9 jab\nmeet 10 wood\ngod 8 owl\ngod 12 sap\nlum 6 ras\npean 4 tier\nhin 6 not\nhin 11 sty\nfizz 5 knee\nspat 11 dale\nimp 2 kor\ntee 7 all\nweet 10 good\nlar 7 shy\nivy 6 obe\nbeen 13 orra\ndak 8 lis\neses 8 mama\nmilt 3 plow\nwile 6 cork\neh 7 lo\neh 10 or\ngab 4 kef\nadder 1 beefs\npac 4 teg"
    }
   ]
  }
 }
]